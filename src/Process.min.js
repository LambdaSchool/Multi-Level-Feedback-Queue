const { SchedulerInterrupt: SchedulerInterrupt } = require("./constants/index");
class Process {
  constructor(pid, cpuTimeNeeded = null, blocking = !1) {
    (this._pid = pid),
      (this.queue = null),
      (this.cpuTimeNeeded =
        null !== cpuTimeNeeded
          ? cpuTimeNeeded
          : Math.round(1e3 * Math.random())),
      (this.blockingTimeNeeded = blocking
        ? Math.round(100 * Math.random())
        : 0),
      (this.stateChanged = !1);
  }
  setParentQueue(queue) {
    this.queue = queue;
  }
  isFinished() {
    return this.blockingTimeNeeded <= 0 && this.cpuTimeNeeded <= 0;
  }
  executeProcess(time) {
    (this.stateChanged = !1),
      this.blockingTimeNeeded
        ? (this.queue.emitInterrupt(this, "PROCESS_BLOCKED"),
          (this.stateChanged = !0))
        : ((this.cpuTimeNeeded -= time),
          (this.cpuTimeNeeded =
            this.cpuTimeNeeded > 0 ? this.cpuTimeNeeded : 0));
  }
  executeBlockingProcess(time) {
    (this.blockingTimeNeeded -= time),
      (this.blockingTimeNeeded =
        this.blockingTimeNeeded > 0 ? this.blockingTimeNeeded : 0),
      this.blockingTimeNeeded ||
        (this.queue.emitInterrupt(this, "PROCESS_READY"),
        (this.stateChanged = !0));
  }
  isStateChanged() {
    return this.stateChanged;
  }
  get pid() {
    return this._pid;
  }
  _getParentQueue() {
    return this.queue;
  }
}
module.exports = Process;
